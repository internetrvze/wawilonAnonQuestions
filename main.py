from telebot.async_telebot import AsyncTeleBot
from telebot.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton as IKB,
    InlineKeyboardMarkup as IKM
)

from dotenv import load_dotenv
from os import getenv
from json import loads
from asyncio import run as _runner

from database import dloadQuestion, setState, getState, getRow
from logger import Logger


load_dotenv()
bot = AsyncTeleBot(token=getenv('BOT_TOKEN'))
admin_ids = loads(getenv('ADMINS'))
print(admin_ids)
logger = Logger()


class Keys:
    cancelQuestionButton = IKM(
        [
            [IKB(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancelQuestion')]
        ]
    )


@bot.message_handler(commands=['start'])
async def startCommand(message: Message) -> None:
    command = message.text.split(' ')
    print(command)
    if len(command) >= 2 and command[1].isdigit():
        await bot.send_message(
            message.chat.id,
            '–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n'
            '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∞".',
            reply_markup=Keys.cancelQuestionButton
        )
        return await setState(
            message.from_user.id, 'question', int(command[1])
        )

    await bot.send_message(
        message.from_user.id,
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤,'
        f' <a href="tg://user?id={message.from_user.id}">'
        f'{message.from_user.full_name}</a>!\n'
        '–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã,'
        ' –∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
        '–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à—É —Å—Å—ã–ª–∫—É. –ü–æ—Å–ª–µ –µ—ë –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ø–µ—Ä–µ—à–µ–¥—à–∏–π –ø–æ –Ω–µ–π '
        '—Å–º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å\n\n'
        'üì• –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: '
        f'https://t.me/AnonsQuestionsRobot?start={message.from_user.id}',
        parse_mode='HTML'
    )


@bot.message_handler(content_types=['text'])
async def getQuestion(message: Message) -> any:
    other_user, qstate = await getState(message.from_user.id)
    print(qstate)
    print(other_user)
    if not other_user:
        return await startCommand(message)

    qid = await dloadQuestion(
        message.from_user.id,
        message.from_user.full_name,
        message.text,
        other_user
    )

    if not qstate:
        try:
            await bot.send_message(
                other_user,
                'üì© –í–∞–º –∑–∞–¥–∞–ª–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!\n'
                'üìÉ –ï–≥–æ —Ç–µ–∫—Å—Ç:\n\n'
                f'<pre>{message.text}</pre>',
                parse_mode='HTML',
                reply_markup=IKM(
                    [
                        [
                            IKB(
                                text='üíå –û—Ç–≤–µ—Ç–∏—Ç—å',
                                callback_data=f'responseQuestion {qid}'
                            )
                        ],
                        [
                            IKB(
                                text='üëÅÔ∏è –ö—Ç–æ —ç—Ç–æ?',
                                callback_data=f'whoAsked {qid}'
                            )
                        ]
                    ],
                )
            )

            await bot.reply_to(
                message, '‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.'
            )
        except BaseException as errorText:
            await logger.asyncLogger(
                f'Error while processing new question: {errorText}\n'
                'Other Info:\n\n'
                '<pre>'
                f'    Receiver ID: {other_user}\n'
                f'    Sender ID: {message.from_user.id}\n'
                f'    Question ID: {qid}\n'
                f'    Question text: {message.text}'
                '</pre>',
                module='WAWILON-ANONQUESTIONS'
            )

            await bot.reply_to(
                message,
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ '
                '–ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.'
            )
        return await setState(
            message.from_user.id, 'main'
        )
    user = message.from_user
    try:
        await bot.send_message(
            other_user,
            'üì© –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '
            f'<a href="tg://user?id={user.id}">{user.full_name}</a>!\n'
            'üìÉ –ï–≥–æ —Ç–µ–∫—Å—Ç:\n\n'
            f'<pre>{message.text}</pre>',
            parse_mode='HMTL'
        )

        await bot.reply_to(
            message, '‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!'
        )

    except BaseException as errorText:
        await logger.asyncLogger(
            f'Error while processing new answer: {errorText}\n'
            'Other Info:\n\n'
            '<pre>'
            f'    Receiver ID: {other_user}\n'
            f'    Sender ID: {message.from_user.id}\n'
            f'    Question ID: {qid}\n'
            f'    Question text: {message.text}'
            '</pre>',
            module='WAWILON-ANONQUESTIONS'
        )

        await bot.reply_to(
            message,
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ '
            '–ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.'
        )
    return await setState(
        message.from_user.id, 'main'
    )

@bot.callback_query_handler(func=lambda event: event.data == 'cancelQuestion')
async def cancelQuestion(event: CallbackQuery) -> None:
    await setState(event.from_user.id, 'main')

    await bot.delete_message(
        chat_id=event.chat_instance,
        message_id=event.message.id
    )

    await bot.send_message(
        chat_id=event.chat_instance,
        text='üìÉ –í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
    )

    return await startCommand(event.message)


@bot.callback_query_handler(
        func=lambda event: event.data.startswith('whoAsked')
)
async def whoAsked(event: CallbackQuery) -> any:
    if event.from_user.id not in admin_ids:
        return await bot.answer_callback_query(
            event.id, text='–ü–æ—à—ë–ª –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞–≤–∞üóø', show_alert=True
        )
    row = (
        await getRow(
            int(event.data.split(' ')[1])
        )
    )

    user = (await bot.get_chat_member(row[0], row[0])).user

    return await bot.send_message(
        event.from_user.id,
        f'Username: @{user.username}\n'
        f'ID: {row[0]}\n\n'
        f'Full Name: {user.full_name}'
    )


@bot.callback_query_handler(
    func=lambda event: event.data.startswith('responseQuestion')
)
async def responseQuestion(event: CallbackQuery) -> None:
    data = (await getRow(event.data.split(' ')[1]))
    await bot.send_message(
        event.chat_instance,
        '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–∞–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å.\n'
        '‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å, –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
        '–∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å", –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–∏–∂–µ.',
        reply_markup=Keys.cancelQuestionButton
    )
    return await setState(event.chat_instance, 'answer', data[0])


while True:
    try:
        _runner(bot.polling(non_stop=True))
    except BaseException as errorText:
        logger.syncLogger(
            f"Error while bot polling: {errorText}",
            "WAWILON-ANONQUESTIONS",
        )
